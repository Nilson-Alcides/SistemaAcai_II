 
@model SistemaAcai_II.Models.VendasViewModel
@using SistemaAcai_II.Models.Constants
@inject SistemaAcai_II.Libraries.Login.LoginColaborador _colaborador
@{
    int qtdDigitada = ViewBag.QuantidadeDigitada != null ? (int)ViewBag.QuantidadeDigitada : 1;
}

<h4>Vendas</h4>

@if (TempData["Erro"] != null)
{
    <div class="alert alert-danger">@TempData["Erro"]</div>
}

<form asp-action="Vendas" method="get" id="formBusca" class="form-group row">
    <label for="termo" class="col-sm-2 col-form-label">Pesquisar Produto</label>
    <div class="col-sm-6">
        <input type="text" name="termo" id="termo" class="form-control" placeholder="Digite o nome ou código do produto..." autofocus value="@ViewBag.Termo" />
    </div>
    <div class="col-sm-4">
        <button type="submit" id="btnBuscar" class="btn btn-primary">Buscar</button>
    </div>
</form>

@if (Model.Produtos != null && Model.Produtos.Any())
{
    <h3>Produto</h3>
    <div class="row">
        <div class="col-md-12">
            <table class="table" id="tabelaProdutos">
                <thead>
                    <tr>
                        <th class="col-1">#Código</th>
                        <th class="col-3">Nome</th>
                        <th class="col-2">Preço Unitário</th>
                        <th class="col-3">Medida</th>
                        <th class="col-3">Ação</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var produto in Model.Produtos)
                    {
                        <tr>
                            <td>@produto.Id</td>
                            <td>@produto.Descricao</td>
                            <td>@produto.PrecoUn.ToString("C")</td>
                            <td>
                                <form id="adicionar-form-@produto.Id" asp-action="AdicionarItem" asp-controller="Comanda" method="post" class="d-flex align-items-center">
                                    <input type="hidden" name="id" value="@produto.Id" />
                                    @if (produto.TipoMedida.ToLower() == "kg")
                                    {
                                        <div class="input-group">
                                            <input type="text" name="pesoRcebido" id="pesoProduto-@produto.Id"
                                                   class="form-control-sm col-3 campo-peso" value="0" />
                                            <span class="input-group-text">Kg</span>
                                        </div>
                                        <input type="hidden" name="quantidade" value="0" />
                                    }
                                    else if (produto.TipoMedida.ToLower() == "unidade")
                                    {
                                        <div class="input-group">
                                            <input type="text" name="quantidade" id="quantidadeProduto-@produto.Id"
                                                   class="form-control-sm col-3 campo-quantidade" value="1" />
                                            <span class="input-group-text">Un</span>
                                        </div>
                                        <input type="hidden" name="pesoRcebido" value="0" />
                                    }
                                </form>
                            </td>
                            <td>
                                <button type="submit" form="adicionar-form-@produto.Id" class="btn btn-success btn-sm">Adicionar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


<h4>Itens da Comanda</h4>

@if (Model.ItensCarrinho != null && Model.ItensCarrinho.Any())
{
    <form asp-action="SalvarComanda" asp-controller="Comanda" method="post" id="formComanda">
        <input type="hidden" id="formaPagamentoHidden" name="Comanda.RefFormasPagamento.Id" value="0" />
        <input type="hidden" name="Comanda.Desconto" id="inputDesconto" />
        <input type="hidden" name="Comanda.RefColaborador.Id" value="@_colaborador.GetColaborador().Id" />


        <div class="form-group row">
            <label for="NomeCliente" class="col-form-label col-sm-3">Nome do Cliente:</label>
            <div class="col-sm-6">
                <input type="text" id="NomeCliente" name="Comanda.NomeCliente" class="form-control form-control-sm" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-9">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Código</th>
                            <th>Nome</th>
                            <th>Medida</th>
                            <th>Preço Unitário</th>
                            <th>Subtotal</th>
                            <th>Ação</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            decimal totalComanda = 0;
                        }
                        @foreach (var item in Model.ItensCarrinho)
                        {
                            var subtotal = item.peso > 0 ? item.peso * item.PrecoUn : Convert.ToDecimal(item.Quantidade * item.PrecoUn);
                            ViewBag.TotalComanda = totalComanda += subtotal;

                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Descricao</td>
                                <td>
                                    @if (@item.peso > 0)
                                    {
                                        @item.peso.ToString("N3") @:Kg
                                    }
                                    else
                                    {
                                        @item.Quantidade @:Un
                                    }
                                </td>
                                <td>@item.PrecoUn.ToString("C")</td>
                                <td>@subtotal.ToString("C")</td>
                                <td class="text-right">
                                    <a asp-controller="Comanda" asp-action="RemoverItem" asp-route-id="@item.Id" class="btn btn-outline-danger">× Remover</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div id="formaPagamentoPrincipal" class="alert alert-secondary mt-3">
                    Forma de Pagamento: <span id="formaPagamentoSelecionadaPrincipal">Não selecionada</span>
                </div>

                <div class="alert alert-info">
                    <h4>Total da Comanda: <span id="totalComandaDisplay">@totalComanda.ToString("C")</span></h4>
                </div>

                <div class="offset-sm-1 col-md-10 d-flex flex-wrap align-items-center gap-1">
                    <button type="button" id="btnFecharPedido" class="btn btn-outline-success">
                        Fechar (Alt + 5)
                    </button>
                    <button type="button" id="btnSalvarComanda" class="btn btn-outline-info">
                        Salvar (Alt + S)
                    </button>
                    <a asp-controller="Comanda" asp-action="limpaConada"
                       class="btn btn-outline-danger"
                       onclick="return confirm('Deseja realmente Remover?')">
                        Remover (Alt + I)
                    </a>
                </div>
            </div>

            <div class="col-md-3">
                <div id="cardPagamento" class="card border-primary shadow" style="display: none;">
                    <div class="card-header bg-primary text-white">
                        <strong>Forma de Pagamento</strong>
                    </div>
                    <div class="card-body">
                        @foreach (var forma in ViewBag.FormaPagamento as SelectList)
                        {
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="formaPagamentoId" value="@forma.Value" id="forma@forma.Value" />
                                <label class="form-check-label" for="forma@forma.Value">@forma.Text</label>
                            </div>
                        }

                        <div id="pagamentoDinheiro" style="display: none;">
                            <dl class="dlist-align" id="campoValorPago" style="display: none;">
                                <dt>Valor Pago:</dt>
                                <dd>
                                    <input id="valorPago" class="form-control form-control-sm dineiro"
                                           type="text" style="width: 100px;" placeholder="0,00" />
                                </dd>
                            </dl>
                            <dl class="dlist-align" id="campoTroco" style="display: none;">
                                <dt>Troco:</dt>
                                <dd>
                                    <input id="troco" class="form-control form-control-sm dineiro"
                                           type="text" style="width: 100px;" placeholder="0,00" readonly />
                                </dd>
                            </dl>
                        </div>

                        <dl class="dlist-align">
                            <dt>Desconto:</dt>
                            <dd>
                                <input asp-for="Comanda.Desconto" id="desconto"
                                       class="form-control form-control-sm dineiro"
                                       type="text"
                                       style="width: 100px;"
                                       placeholder="0,00" />
                            </dd>
                        </dl>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-success w-100" id="btnConfirmarPagamento">
                            Finalizar (Alt + 6)
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <br />
    </form>
}
else
{
    <p>Nenhum item no carrinho.</p>
}
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Referências principais
            const formComanda = document.getElementById('formComanda');
            const btnSalvarComanda = document.getElementById('btnSalvarComanda');
            const nomeClienteInput = document.getElementById('NomeCliente');
            const formaPagamentoHidden = document.getElementById('formaPagamentoHidden');
            const btnFecharPedido = document.getElementById('btnFecharPedido');
            const cardPagamento = document.getElementById('cardPagamento');
            const btnConfirmarPagamento = document.getElementById('btnConfirmarPagamento');
            const campoPesquisa = document.getElementById('termo');
            const formBusca = document.getElementById('formBusca');

            // --- Salvar Comanda ---
            if (btnSalvarComanda) {
                btnSalvarComanda.addEventListener('click', function () {
                    if (nomeClienteInput.value.trim() === '') {
                        nomeClienteInput.value = 'Não Informado';
                    }
                    formaPagamentoHidden.value = 0;
                    formComanda.submit();
                });
            }

            // --- Fechar Pedido ---
            if (btnFecharPedido && btnConfirmarPagamento) {
                btnFecharPedido.addEventListener('click', function () {
                    cardPagamento.style.display = 'block';
                    btnFecharPedido.style.display = 'none';
                    const primeiroRadio = document.querySelector('input[name="formaPagamentoId"]');
                    if (primeiroRadio) primeiroRadio.focus();
                });

                btnConfirmarPagamento.addEventListener('click', function () {
                    const formaSelecionada = document.querySelector('input[name="formaPagamentoId"]:checked');
                    if (!formaSelecionada) {
                        alert('Por favor, selecione uma forma de pagamento.');
                        return;
                    }
                    formComanda.submit();
                });
            }

            // --- Balança ---
            let pesoDaBalanca = 0;
            let balancaDisponivel = false;
            setInterval(() => {
                fetch('/Admin/api/balanca')
                    .then(response => response.json())
                    .then(data => {
                        pesoDaBalanca = parseFloat(data.peso.replace(',', '.')) || 0;
                        balancaDisponivel = pesoDaBalanca > 0;
                    });
            }, 500);

            // --- Adicionar Produto ---
            function adicionarProduto(id, peso, quantidade) {
                const url = '@Url.Action("AdicionarItem", "Comanda")';
                const formData = new URLSearchParams();
                formData.append('id', id);
                formData.append('pesoRcebido', peso ?? 0);
                formData.append('quantidade', quantidade ?? 0);

                fetch(url, { method: 'POST', body: formData })
                    .then(response => {
                        if (response.ok) {
                            window.location.reload();
                        } else {
                            response.text().then(text => {
                                alert('Erro ao adicionar item: ' + text);
                            });
                        }
                    });
            }

            // --- Busca com campo ---
            if (formBusca) {
                formBusca.addEventListener('submit', async (e) => {
                    const termo = campoPesquisa.value.trim();
                    const partes = termo.split('*');

                    if (partes.length === 2) {
                        e.preventDefault();
                        const valorDigitado = parseFloat(partes[0].trim().replace(',', '.'));
                        const codigo = partes[1].trim();

                        try {
                            const produto = await fetch(`@Url.Action("ObterProdutoPorId", "Comanda")?id=${codigo}`).then(res => res.json());
                            if (produto) {
                                if (produto.tipoMedida.toLowerCase() === 'kg') {
                                    adicionarProduto(codigo, valorDigitado, 0);
                                } else if (produto.tipoMedida.toLowerCase() === 'unidade') {
                                    adicionarProduto(codigo, 0, valorDigitado);
                                }
                            }
                        } catch {
                            alert('Produto não encontrado ou erro de comunicação.');
                        }
                    } else if (balancaDisponivel && !isNaN(parseInt(termo))) {
                        e.preventDefault();
                        adicionarProduto(termo, pesoDaBalanca, 0);
                    }
                });
            }

            // --- Atalhos ---
            document.addEventListener('keydown', function (e) {
                if (e.altKey && e.key === '5') {
                    e.preventDefault();
                    btnFecharPedido?.click();
                }
                if (e.altKey && e.key === '6') {
                    e.preventDefault();
                    btnConfirmarPagamento?.click();
                }
                if (e.altKey && e.key.toLowerCase() === 's') {
                    e.preventDefault();
                    btnSalvarComanda?.click();
                }
            });
        });

        // --- Cálculos e máscaras ---
        $(document).ready(function () {
            $('.cep').mask('00000-000');
            $('.Telefone').mask('(00) 0000-0000');
            $('.dineiro').mask("#.##0,00", { reverse: true });
            $('.cpf').mask('000.000.000-00', { reverse: true });
            $('.cnpj').mask('00.000.000/0000-00', { reverse: true });
            $('.ie').mask('000.000.000/0000', { reverse: true });

            const totalComandaElemento = $('#totalComandaDisplay');
            const descontoInput = $('#desconto');
            const valorPagoInput = $('#valorPago');
            const trocoInput = $('#troco');
            const formaPagamentoRadios = $('input[name="formaPagamentoId"]');
            const formaPagamentoHidden = $('#formaPagamentoHidden');
            const inputDescontoHidden = $('#inputDesconto');

            let totalOriginal = parseFloat('@(ViewBag.TotalComanda?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")');
            let totalComDesconto = totalOriginal;

            function formatarMoeda(valor) {
                return isNaN(valor) ? "R$ 0,00" : valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
            }

            function atualizarTotal() {
                const desconto = parseFloat(descontoInput.val().replace(/[^0-9,]/g, '').replace(',', '.')) || 0;
                inputDescontoHidden.val(desconto);
                totalComDesconto = Math.max(totalOriginal - desconto, 0);
                totalComandaElemento.text(formatarMoeda(totalComDesconto));
                calcularTroco();
            }

            function calcularTroco() {
                const valorPago = parseFloat(valorPagoInput.val().replace(/[^0-9,]/g, '').replace(',', '.')) || 0;
                const troco = valorPago - totalComDesconto;
                trocoInput.val(formatarMoeda(troco));
            }

            function atualizarVisibilidadeDinheiro() {
                const formaSelecionada = $('input[name="formaPagamentoId"]:checked').next('label').text().trim().toLowerCase();
                if (formaSelecionada === 'dinheiro') {
                    $('#pagamentoDinheiro, #campoValorPago, #campoTroco').show();
                } else {
                    $('#pagamentoDinheiro, #campoValorPago, #campoTroco').hide();
                    valorPagoInput.val('');
                    trocoInput.val('');
                }
            }

            descontoInput.on('input', atualizarTotal);
            valorPagoInput.on('input', calcularTroco);
            formaPagamentoRadios.on('change', function () {
                formaPagamentoHidden.val($(this).val());
                $('#formaPagamentoSelecionadaPrincipal').text($(this).next('label').text());
                atualizarVisibilidadeDinheiro();
            });

            atualizarTotal();
            atualizarVisibilidadeDinheiro();
        });
    </script>
}


@* @section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Lógica para mostrar/ocultar o card de pagamento
            const btnExibirPagamento = document.getElementById('btnExibirPagamento');
            const cardPagamento = document.getElementById('cardPagamento');
            const formaPagamentoRadios = document.querySelectorAll('input[name="formaPagamentoId"]');
            const formComanda = document.getElementById('formComanda');

            if (btnExibirPagamento && cardPagamento) {
                btnExibirPagamento.addEventListener('click', function () {
                    // Exibe o card de pagamento
                    cardPagamento.style.display = 'block';

                    // Muda o tipo do botão para submit
                    this.type = 'submit';

                    // Remove o event listener para evitar submissões múltiplas
                    this.removeEventListener('click', arguments.callee);

                    // Adiciona a validação antes da submissão
                    formComanda.addEventListener('submit', function (event) {
                        const formaSelecionada = document.querySelector('input[name="formaPagamentoId"]:checked');
                        if (!formaSelecionada) {
                            alert('Por favor, selecione uma forma de pagamento.');
                            event.preventDefault(); // Impede a submissão do formulário
                        }
                    });
                });
            }

            // Lógica para o campo Nome do Cliente
            const nomeClienteInput = document.getElementById('NomeCliente');
            formComanda.addEventListener('submit', function () {
                if (nomeClienteInput.value.trim() === '') {
                    nomeClienteInput.value = 'Não Informado';
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Referências para os elementos do DOM
            const formComanda = document.getElementById('formComanda');
            const btnSalvarComanda = document.getElementById('btnSalvarComanda');
            const nomeClienteInput = document.getElementById('NomeCliente');
            const formaPagamentoHidden = document.getElementById('formaPagamentoHidden');
            const btnFecharPedido = document.getElementById('btnFecharPedido');
            const cardPagamento = document.getElementById('cardPagamento');
            const btnConfirmarPagamento = document.getElementById('btnConfirmarPagamento');

            // --- Lógica para o botão "Salvar Comanda" ---
            if (btnSalvarComanda) {
                btnSalvarComanda.addEventListener('click', function () {
                    // Se o campo do nome do cliente estiver vazio, define "Não Informado"
                    if (nomeClienteInput.value.trim() === '') {
                        nomeClienteInput.value = 'Não Informado';
                    }
                    // Define a forma de pagamento como 0 para indicar que é um rascunho
                    formaPagamentoHidden.value = 0;
                    // Submete o formulário
                    formComanda.submit();
                });
            }

            // --- Lógica para o fluxo de "Fechar Pedido" ---
            if (btnFecharPedido && btnConfirmarPagamento) {
                // Ao clicar em "Fechar Pedido", exibe o card de pagamento
                btnFecharPedido.addEventListener('click', function () {
                    cardPagamento.style.display = 'block';
                    btnFecharPedido.style.display = 'none'; // Oculta o botão "Fechar Pedido"
                    // Foca no primeiro radio button para melhor usabilidade
                    const primeiroRadio = document.querySelector('input[name="formaPagamentoId"]');
                    if (primeiroRadio) {
                        primeiroRadio.focus();
                    }
                });

                // Ao clicar em "Finalizar" no card de pagamento
                btnConfirmarPagamento.addEventListener('click', function () {
                    const formaSelecionada = document.querySelector('input[name="formaPagamentoId"]:checked');
                    if (!formaSelecionada) {
                        alert('Por favor, selecione uma forma de pagamento.');
                    } else {
                        // A lógica de update do campo hidden já foi feita pelo jQuery
                        // Então, basta submeter o formulário
                        formComanda.submit();
                    }
                });
            }

            // --- Lógica da balança e do campo de pesquisa de volta aqui ---
            const campoPesquisa = document.getElementById('termo');
            const formBusca = document.getElementById('formBusca');
            let pesoDaBalanca = 0;
            let balancaDisponivel = false;

            setInterval(() => {
                fetch('/Admin/api/balanca')
                    .then(response => response.json())
                    .then(data => {
                        pesoDaBalanca = parseFloat(data.peso.replace(',', '.')) || 0;
                        balancaDisponivel = pesoDaBalanca > 0;
                    });
            }, 500);

            function adicionarProduto(id, peso, quantidade) {
                const url = '@Url.Action("AdicionarItem", "Comanda")';
                const formData = new URLSearchParams();
                formData.append('id', id);
                if (peso !== null) {
                    formData.append('pesoRcebido', peso);
                }
                if (quantidade !== null && !isNaN(quantidade)) {
                    formData.append('quantidade', quantidade);
                }

                fetch(url, {
                    method: 'POST',
                    body: formData
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        response.text().then(text => {
                            alert('Erro ao adicionar item: ' + text);
                        });
                    }
                });
            }

            if (formBusca) {
                formBusca.addEventListener('submit', async (e) => {
                    const termo = campoPesquisa.value.trim();
                    const partes = termo.split('*');

                    if (partes.length === 2) {
                        e.preventDefault();
                        const valorDigitado = parseFloat(partes[0].trim().replace(',', '.'));
                        const codigo = partes[1].trim();

                        try {
                            const produto = await fetch(`@Url.Action("ObterProdutoPorId", "Comanda")?id=${codigo}`).then(res => res.json());
                            if (produto) {
                                if (produto.tipoMedida.toLowerCase() === 'kg') {
                                    adicionarProduto(codigo, valorDigitado, 0);
                                } else if (produto.tipoMedida.toLowerCase() === 'unidade') {
                                    adicionarProduto(codigo, 0, valorDigitado);
                                }
                            }
                        } catch (error) {
                            alert('Produto não encontrado ou erro de comunicação.');
                        }
                    } else if (balancaDisponivel && !isNaN(parseInt(termo))) {
                        e.preventDefault();
                        adicionarProduto(termo, pesoDaBalanca, 0);
                    }
                });
            }

            // --- Atalhos de teclado ---
            document.addEventListener('keydown', function (e) {
                // Alt + 5 – Fechar Pedido
                if (e.altKey && e.key === '5') {
                    e.preventDefault();
                    if (btnFecharPedido) {
                        btnFecharPedido.click();
                    }
                }
                // Alt + 5 – Finalizar
                if (e.altKey && e.key === '6') {
                    e.preventDefault();
                    if (btnConfirmarPagamento) {
                        btnConfirmarPagamento.click();
                    }
                }
                // Alt + S – Salvar Comanda
                if (e.altKey && e.key.toLowerCase() === 's') {
                    e.preventDefault();
                    if (btnSalvarComanda) {
                        btnSalvarComanda.click();
                    }
                }
            });
        });

        // --- Lógica de cálculo e máscaras usando jQuery ---
        $(document).ready(function () {
            // Máscaras de input
            $('.cep').mask('00000-000');
            $('.Telefone').mask('(00) 0000-0000');
            $('.dineiro').mask("#.##0,00", { reverse: true });
            $('.cpf').mask('000.000.000-00', { reverse: true });
            $('.cnpj').mask('00.000.000/0000-00', { reverse: true });
            $('.ie').mask('000.000.000/0000', { reverse: true });

            // Lógica para o campo de peso (se necessário)
            $('.peso').keyup(function () {
                var v = this.value,
                    integer = v.split('.')[0];
                v = v.replace(/\D/g, "");
                v = v.replace(/^[0]+/, "");
                if (v.length <= 3 || !integer) {
                    if (v.length === 1) v = '0.00' + v;
                    if (v.length === 2) v = '0.0' + v;
                    if (v.length === 3) v = '0.' + v;
                } else {
                    v = v.replace(/^(\d{1,})(\d{3})$/, "$1.$2");
                }
                this.value = v;
            });

            const totalComandaElemento = $('#totalComandaDisplay');
            const descontoInput = $('#desconto');
            const valorPagoInput = $('#valorPago');
            const trocoInput = $('#troco');
            const formaPagamentoRadios = $('input[name="formaPagamentoId"]');
            const formaPagamentoHidden = $('#formaPagamentoHidden');
            const inputDescontoHidden = $('#inputDesconto');

            let totalOriginal = parseFloat('@(ViewBag.TotalComanda?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")');
            let totalComDesconto = totalOriginal;

            function formatarMoeda(valor) {
                if (isNaN(valor)) return "R$ 0,00";
                return valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
            }

            function atualizarTotal() {
                const desconto = parseFloat(descontoInput.val().replace(/[^0-9,]/g, '').replace(',', '.')) || 0;
                inputDescontoHidden.val(desconto);
                totalComDesconto = totalOriginal - desconto;
                if (totalComDesconto < 0) totalComDesconto = 0;
                totalComandaElemento.text(formatarMoeda(totalComDesconto));
                calcularTroco();
            }

            function calcularTroco() {
                const valorPago = parseFloat(valorPagoInput.val().replace(/[^0-9,]/g, '').replace(',', '.')) || 0;
                const troco = valorPago - totalComDesconto;
                trocoInput.val(formatarMoeda(troco));
            }

            function atualizarVisibilidadeDinheiro() {
                const formaSelecionada = $('input[name="formaPagamentoId"]:checked').next('label').text().trim().toLowerCase();
                if (formaSelecionada === 'dinheiro') {
                    $('#pagamentoDinheiro').show();
                    $('#campoValorPago').show();
                    $('#campoTroco').show();
                } else {
                    $('#pagamentoDinheiro').hide();
                    $('#campoValorPago').hide();
                    $('#campoTroco').hide();
                    valorPagoInput.val('');
                    trocoInput.val('');
                }
            }

            // Eventos
            descontoInput.on('input', atualizarTotal);
            valorPagoInput.on('input', calcularTroco);
            formaPagamentoRadios.on('change', function () {
                const id = $(this).val();
                const texto = $(this).next('label').text();
                formaPagamentoHidden.val(id);
                $('#formaPagamentoSelecionadaPrincipal').text(texto);
                atualizarVisibilidadeDinheiro();
            });

            // Inicializa os cálculos
            atualizarTotal();
            atualizarVisibilidadeDinheiro();
        });
    </script>
} *@